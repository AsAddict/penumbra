Penumbra is an idiomatic wrapper for OpenGL in Clojure, by way of LWJGL.  

This Java/C code

<pre><code>glEnable(GL_LIGHT0);
glPushMatrix();
glTranslated(0, 0, -10);
glBegin(GL_QUADS);
glVertex3d(0, 0, 0);
glVertex3d(0, 1, 0);
glVertex3d(1, 1, 0);
glVertex3d(1, 0, 0);
glEnd();
glPopMatrix();</code></pre>
	
becomes

<pre><code>(enable :light0)
(push-matrix
  (translate 0 0 -10)
  (draw-quads
    (vertex 0 0 0)
    (vertex 0 1 0)
    (vertex 1 1 0)
    (vertex 1 0 0)))</code></pre>

Numerous sample programs can be found in @/src/example@.  They include clean, functional implementations of "Tetris":http://github.com/ztellman/penumbra/blob/master/test/example/game/tetris.clj and "Asteroids":http://github.com/ztellman/penumbra/blob/master/test/example/game/asteroids.clj, and a GPU-driven "Mandelbrot viewer":http://github.com/ztellman/penumbra/blob/master/test/example/gpgpu/mandelbrot.clj.

A long term goal for Penumbra is to simplify GPU programming as much as possible, allowing for both advanced graphical effects and general computation.  This is a work in progress, but this "n-body simulation":http://github.com/ztellman/penumbra/blob/master/test/example/gpgpu/n_body.clj is a good example of what's possible.

h3. Using Penumbra

The @master@ branch of Penumbra targets version 1.2.0 for clojure and clojure-contrib.  As a result, Leiningen doesn't fully work.  If you want seamless interop with Leiningen, consider using the "0.5.0 branch":http://github.com/ztellman/penumbra/tree/0.5.0.  Directions for installation and use in other projects can be found "here":http://wiki.github.com/ztellman/penumbra/getting-started.

If you have any questions, please visit the "mailing list":http://groups.google.com/group/penumbra-lib.